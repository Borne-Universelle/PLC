#ifndef WIFI_MANAGMENT_LIB_H
#define WIFI_MANAGMENT_LIB_H

// By Thierry !

#include <map>
#include "Arduino.h"
#include <WiFi.h>
#include "WiFiGeneric.h"
#include "esp_err.h"
#include "esp_event.h"
#include <functional>
#include "WiFiType.h"
#include "IPAddress.h"
#include "esp_smartconfig.h"
#include "wifi_provisioning/manager.h"


#define WIFIMANAGMENT_VERSION "WIFIMANAGMENT_VERSION_1.0"

#define NB_MAX_WIFI	10
#define SSID_LENGHT	30
#define PWD_LENGHT	30

// Aucune id√©e pour quoi cet enum n'est pas accessible !!!!!!!!!!!!!
typedef enum {
	ARDUINO_EVENT_WIFI_READY = 0,
	ARDUINO_EVENT_WIFI_SCAN_DONE,
	ARDUINO_EVENT_WIFI_STA_START,
	ARDUINO_EVENT_WIFI_STA_STOP,
	ARDUINO_EVENT_WIFI_STA_CONNECTED,
	ARDUINO_EVENT_WIFI_STA_DISCONNECTED,
	ARDUINO_EVENT_WIFI_STA_AUTHMODE_CHANGE,
	ARDUINO_EVENT_WIFI_STA_GOT_IP,
	ARDUINO_EVENT_WIFI_STA_GOT_IP6,
	ARDUINO_EVENT_WIFI_STA_LOST_IP,
	ARDUINO_EVENT_WIFI_AP_START,
	ARDUINO_EVENT_WIFI_AP_STOP,
	ARDUINO_EVENT_WIFI_AP_STACONNECTED,
	ARDUINO_EVENT_WIFI_AP_STADISCONNECTED,
	ARDUINO_EVENT_WIFI_AP_STAIPASSIGNED,
	ARDUINO_EVENT_WIFI_AP_PROBEREQRECVED,
	ARDUINO_EVENT_WIFI_AP_GOT_IP6,
	ARDUINO_EVENT_WIFI_FTM_REPORT,
	ARDUINO_EVENT_ETH_START,
	ARDUINO_EVENT_ETH_STOP,
	ARDUINO_EVENT_ETH_CONNECTED,
	ARDUINO_EVENT_ETH_DISCONNECTED,
	ARDUINO_EVENT_ETH_GOT_IP,
	ARDUINO_EVENT_ETH_GOT_IP6,
	ARDUINO_EVENT_WPS_ER_SUCCESS,
	ARDUINO_EVENT_WPS_ER_FAILED,
	ARDUINO_EVENT_WPS_ER_TIMEOUT,
	ARDUINO_EVENT_WPS_ER_PIN,
	ARDUINO_EVENT_WPS_ER_PBC_OVERLAP,
	ARDUINO_EVENT_SC_SCAN_DONE,
	ARDUINO_EVENT_SC_FOUND_CHANNEL,
	ARDUINO_EVENT_SC_GOT_SSID_PSWD,
	ARDUINO_EVENT_SC_SEND_ACK_DONE,
	ARDUINO_EVENT_PROV_INIT,
	ARDUINO_EVENT_PROV_DEINIT,
	ARDUINO_EVENT_PROV_START,
	ARDUINO_EVENT_PROV_END,
	ARDUINO_EVENT_PROV_CRED_RECV,
	ARDUINO_EVENT_PROV_CRED_FAIL,
	ARDUINO_EVENT_PROV_CRED_SUCCESS,
	ARDUINO_EVENT_MAX
} arduino_event_id_t;

struct WifiItem {
    char SSID[SSID_LENGHT];
	char PWD[PWD_LENGHT];
};

class WifiManagment{
	public:
		WifiManagment(unsigned char _nbWifiItems, char *);
		unsigned char  addItem(const char *ssid, const char *pwd); // zero terminated string, return the number of items
		char *wifiMapstoCharPtr(); // convert maps as char chain
		void parseCharsMap();  // parse the chain and populate map
		WifiItem getNextNetwork();
		void displayRegistredNetworks();
		void showIpAddress();
		static void printWifiEvent(WiFiEvent_t event);
	
	private:
		std::map<unsigned char, WifiItem> wifiItemsMap;
		char *mapAsCharPtr;
		///Laflamme *laflammePtr;
		unsigned char nbWifiItems;
		char currentNetworkId = -1;
	
};
#endif